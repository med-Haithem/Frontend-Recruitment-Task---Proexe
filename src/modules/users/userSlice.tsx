import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { I_USER } from "../../types/user";
import UserService from "./service";
export interface UsersState {
  data: I_USER[];
  loading: boolean;
  error?: any | null;
}

const initialState: UsersState = {
  data: [],
  loading: false,
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllUsers = createAsyncThunk(
  "users/fetchAllUsers",

  async (_, { rejectWithValue }) => {
    try {
      const response = await UserService.getAllUsers();
      return response;
    } catch (err) {
      return rejectWithValue(err);
    }
  }
);

export const usersSlice = createSlice({
  name: "users",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(fetchAllUsers.pending, (state, action) => {
      state.data = [];
      state.loading = true;
    });
    builder.addCase(fetchAllUsers.fulfilled, (state, action) => {
      state.data = action.payload;
      state.loading = false;
    });

    builder.addCase(fetchAllUsers.rejected, (state, action) => {
      state.data = [];
      state.loading = false;
      state.error = action.error;
    });
  },
});

export const {} = usersSlice.actions;

export const selectUsers = (state: RootState) => state.users;

export default usersSlice.reducer;
